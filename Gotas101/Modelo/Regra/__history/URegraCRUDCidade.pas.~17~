unit URegraCRUDCidade;

interface

uses
    URegraCRUD
  , UEntidade
  , URepositorioCidade
  , UCIDADE
  ;

type
  TRegraCRUDCidade = class(TRegraCRUD)
  private
    FRepositorioCidade: TRepositorioCidade;

    procedure ValidaNome(const csNome: String);
    procedure ValidaCidade(const coCIDADE: TCIDADE);

  public
    constructor Create; override;
    destructor Destroy; override;

    procedure Insere(const coENTIDADE: TENTIDADE); override;
    procedure Atualiza(const coENTIDADE: TENTIDADE); override;
    procedure ValidaExistencia(const ciId: Integer); override;
  end;

implementation

uses
    SysUtils
  , URepositorioDB
  ;

{ TRegraCRUDCidade }

procedure TRegraCRUDCidade.Atualiza(const coENTIDADE: TENTIDADE);
begin
  inherited;
  ValidaCidade(TCIDADE(coENTIDADE));
  FRepositorioCidade.Insere(TCIDADE(coENTIDADE));
end;

constructor TRegraCRUDCidade.Create;
begin
  Inherited;
  FRepositorioDB := TRepositorioDB<TENTIDADE>(TRepositorioCidade.Create);
end;

destructor TRegraCRUDCidade.Destroy;
begin
  FreeAndNil(FRepositorioCidade);
  inherited;
end;

procedure TRegraCRUDCidade.Insere(const coENTIDADE: TENTIDADE);
begin
  ValidaCidade(TCIDADE(coENTIDADE));
  FRepositorioCidade.Insere(TCIDADE(coENTIDADE));
end;

procedure TRegraCRUDCidade.ValidaCidade(const coCIDADE: TCIDADE);
begin
  ValidaNome(coCIDADE.NOME);
end;

procedure TRegraCRUDCidade.ValidaExistencia(const ciId: Integer);
begin
  if not FRepositorioCidade.Achou(ciId) then
    raise Exception.CreateFmt('Cidade com cód. %d não encontrada',
      [ciId]);
end;

procedure TRegraCRUDCidade.ValidaNome(const csNome: String);
begin
  if Trim(csNome) = EmptyStr then
    raise Exception.Create('Nome da cidade é obrigatório');
end;

end.
